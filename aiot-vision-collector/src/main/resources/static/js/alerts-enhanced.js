/* Enhanced Alerts panel logic with meta pre-fill & redesigned minimalist cards + per-device badges */
(function(global){
  'use strict';
  let enabled = true; let interval = null; const REFRESH_MS = 15000; let loading=false; let lastMetaActive=0; let initialized=false;
  let currentAlerts = []; // 缓存当前活跃预警列表
  let globalVisible = false; // 全局面板开关
  function id(x){ return document.getElementById(x); }
  function init(){ if(initialized) return; initialized=true; const summary=id('alertSummary'); const panel=id('alertPanel'); const count=id('alertActiveCount'); if(!summary) return; if(count) count.textContent='预警加载中...';
    // 添加点击事件用于展开全局面板
    if(count){ count.setAttribute('role','button'); count.setAttribute('tabindex','0'); count.setAttribute('aria-expanded','false'); count.addEventListener('click',toggleGlobalAlerts); count.addEventListener('keydown',e=>{ if(e.key==='Enter'||e.key===' '){ e.preventDefault(); toggleGlobalAlerts(); }}); }
    const refreshBtn=id('alertRefreshBtn'); if(refreshBtn){ refreshBtn.addEventListener('click',()=>fetchAlerts(true)); }
    fetch('/data/api/alerts/meta').then(r=>r.json()).then(meta=>{ if(meta && meta.enabled===false){ enabled=false; summary.style.display='none'; if(panel) panel.style.display='none'; return; } enabled=true; summary.style.display='flex'; lastMetaActive=meta&&typeof meta.activeCount==='number'?meta.activeCount:0; if(count){ count.textContent = lastMetaActive>0? ('活跃预警: '+lastMetaActive) : '无活跃预警'; } fetchAlerts(true); if(interval) clearInterval(interval); interval=setInterval(fetchAlerts, REFRESH_MS); }).catch(e=>{ console.warn('[alerts] meta失败',e); fetchAlerts(true); }); }
  function fetchAlerts(force){ if(!enabled) return; if(loading && !force) return; loading=true; fetch('/data/api/alerts').then(r=>{ if(!r.ok) throw new Error('HTTP '+r.status); return r.json(); }).then(list=>{ currentAlerts=Array.isArray(list)?list:[]; render(); }).catch(err=>{ console.warn('[alerts] 列表失败',err); currentAlerts=[]; render('加载失败'); }).finally(()=>{ loading=false; }); }
  function render(error){ const summary=id('alertSummary'); const count=id('alertActiveCount'); const panel=id('alertPanel'); const wrap=id('alertList'); if(!summary||!count) return; if(error){ count.textContent='预警加载失败'; summary.classList.add('empty'); if(panel) panel.style.display='none'; updateDeviceBadges([]); return; }
    const active=currentAlerts.filter(a=>!a.acknowledged && !a.ignored); if(!active.length){ count.textContent='无活跃预警'; summary.classList.add('empty'); if(panel) panel.style.display='none'; updateDeviceBadges([]); globalVisible=false; updateGlobalAria(false); return; }
    summary.classList.remove('empty'); count.textContent='活跃预警: '+active.length; updateDeviceBadges(active);
    // 根据 globalVisible 决定是否显示总面板
    if(panel && wrap){ if(globalVisible){ panel.style.display='block'; wrap.innerHTML=active.map(globalCardHtml).join(''); bindGlobalCardEvents(wrap); } else { panel.style.display='none'; } }
    updateGlobalAria(globalVisible);
  }
  function updateDeviceBadges(active){ const map={}; active.forEach(a=>{ if(!a.deviceId) return; map[a.deviceId]=(map[a.deviceId]||0)+1; });
    document.querySelectorAll('.dev-alert-badge').forEach(badge=>{ const devId=badge.getAttribute('data-device'); const c=map[devId]||0; badge.dataset.count=c; if(c>0){ badge.textContent='⚠ '+c; badge.style.display='inline-flex'; } else { badge.textContent=''; badge.style.display='none'; closeDeviceAlerts(devId); } }); }
  function toggleGlobalAlerts(){ globalVisible=!globalVisible; updateGlobalAria(globalVisible); render(); }
  function updateGlobalAria(isOpen){ const count=id('alertActiveCount'); const summary=id('alertSummary'); if(count){ count.setAttribute('aria-expanded', String(!!isOpen)); } if(summary){ summary.classList.toggle('global-open', !!isOpen); } }
  function globalCardHtml(a){ const sev=(a.severity||'MEDIUM'); const isDev=a.type==='DEVIATION'; const av=isFinite(a.actualValue)?Number(a.actualValue).toFixed(2):'--'; const pb=isFinite(a.predictedBaseValue)?Number(a.predictedBaseValue).toFixed(2):null; const dp=isFinite(a.deviationPercent)?Number(a.deviationPercent).toFixed(2)+'%':null; const th=isFinite(a.thresholdValue)?Number(a.thresholdValue).toFixed(2):null; const ts=formatTs(a.createdAt); let line=''; if(isDev){ line=`<div class='ac-line'><span class='lbl'>预测</span><strong>${pb??'--'}</strong><span class='sep'></span><span class='lbl'>当前</span><strong>${av}</strong><span class='sep'></span><span class='lbl'>偏差</span><strong>${dp??'--'}</strong></div>`; } else { if(pb!==null && dp!==null){ line=`<div class='ac-line'><span class='lbl'>预测</span><strong>${pb}</strong><span class='sep'></span><span class='lbl'>当前</span><strong>${av}</strong><span class='sep'></span><span class='lbl'>偏差</span><strong>${dp}</strong></div>`; } else { line=`<div class='ac-line'><span class='lbl'>阈值</span><strong>${th??'--'}</strong><span class='sep'></span><span class='lbl'>当前</span><strong>${av}</strong></div>`; } }
    const shortMsg = escapeHtml((a.message||'预警').replace(/^(阈值预警:|偏差预警:)/,''));
    return `<div class='alert-card ac-${sev}' data-alert-id='${a.id}'><div class='ac-head'><span class='ac-dot'></span><span class='ac-type'>${isDev?'偏差':'阈值'}</span><span class='ac-sev'>${sev}</span><span class='ac-time'>${ts}</span></div><div class='ac-msg'>${shortMsg}</div>${line}<div class='ac-actions'><button type='button' class='btn-mini ok' aria-label='确认'>✓</button><button type='button' class='btn-mini ignore' aria-label='忽略'>×</button></div></div>`; }
  function bindGlobalCardEvents(scope){ scope.querySelectorAll('.alert-card').forEach(card=>{ if(card._bound) return; card._bound=true; const id=card.getAttribute('data-alert-id'); const okBtn=card.querySelector('.btn-mini.ok'); const igBtn=card.querySelector('.btn-mini.ignore'); if(okBtn) okBtn.addEventListener('click',()=>ackAlert(id, okBtn)); if(igBtn) igBtn.addEventListener('click',()=>ignoreAlert(id, igBtn)); }); }
  function openDeviceAlerts(deviceId){ if(!deviceId) return; const active=currentAlerts.filter(a=>!a.acknowledged && !a.ignored && String(a.deviceId)===String(deviceId)); if(!active.length){ closeDeviceAlerts(deviceId); return; }
    const card=document.querySelector(`.card[data-device-id='${deviceId}']`); if(!card) return; let pop=card.querySelector('.dev-alert-pop'); if(!pop){ pop=document.createElement('div'); pop.className='dev-alert-pop'; pop.setAttribute('role','dialog'); pop.setAttribute('aria-label','设备预警'); pop.innerHTML='<div class="dap-header"><span class="dap-title">预警</span><button type="button" class="dap-close" aria-label="关闭">×</button></div><div class="dap-body"></div>'; card.appendChild(pop); const closeBtn=pop.querySelector('.dap-close'); closeBtn.addEventListener('click',()=>closeDeviceAlerts(deviceId)); }
    const body=pop.querySelector('.dap-body'); body.innerHTML=active.map(deviceAlertHtml).join(''); bindDeviceAlertEvents(pop, deviceId); pop.style.display='block'; requestAnimationFrame(()=>pop.classList.add('show')); }
  function closeDeviceAlerts(deviceId){ const card=document.querySelector(`.card[data-device-id='${deviceId}']`); if(!card) return; const pop=card.querySelector('.dev-alert-pop'); if(pop){ pop.classList.remove('show'); setTimeout(()=>{ pop.style.display='none'; },140); } }
  function deviceAlertHtml(a){ const sev=(a.severity||'MEDIUM'); const isDev=a.type==='DEVIATION'; const av=isFinite(a.actualValue)?Number(a.actualValue).toFixed(2):'--'; const pb=isFinite(a.predictedBaseValue)?Number(a.predictedBaseValue).toFixed(2):null; const dp=isFinite(a.deviationPercent)?Number(a.deviationPercent).toFixed(2)+'%':null; const th=isFinite(a.thresholdValue)?Number(a.thresholdValue).toFixed(2):null; const ts=formatTs(a.createdAt); let line=''; if(isDev){ line=`<span class='dap-line'><b>${av}</b><span class='dap-sep'></span><span class='lbl'>预测</span>${pb??'--'}<span class='dap-sep'></span><span class='lbl'>偏差</span>${dp??'--'}</span>`; } else { if(pb!==null && dp!==null){ line=`<span class='dap-line'><b>${av}</b><span class='dap-sep'></span><span class='lbl'>预测</span>${pb}<span class='dap-sep'></span><span class='lbl'>偏差</span>${dp}</span>`; } else { line=`<span class='dap-line'><b>${av}</b>${th?' / '+th:''}</span>`; } }
    const shortMsg = escapeHtml((a.message||'预警').replace(/^(阈值预警:|偏差预警:)/,''));
    return `<div class='dap-item sev-${sev}' data-alert-id='${a.id}'><span class='dap-dot'></span><span class='dap-msg' title='${escapeHtml(shortMsg)}'>${shortMsg}</span>${line}<span class='dap-time'>${ts}</span><div class='dap-act'><button type='button' class='dap-btn ok' aria-label='确认'>✓</button><button type='button' class='dap-btn ignore' aria-label='忽略'>×</button></div></div>`; }
  function bindDeviceAlertEvents(pop, deviceId){ pop.querySelectorAll('.dap-item').forEach(item=>{ if(item._bound) return; item._bound=true; const id=item.getAttribute('data-alert-id'); const okBtn=item.querySelector('.dap-btn.ok'); const igBtn=item.querySelector('.dap-btn.ignore'); if(okBtn) okBtn.addEventListener('click',()=>ackAlert(id, okBtn, deviceId)); if(igBtn) igBtn.addEventListener('click',()=>ignoreAlert(id, igBtn, deviceId)); }); }
  function ackAlert(id, btn, deviceId){ if(!id) return; const sel=deviceId?`.dap-item[data-alert-id='${id}']`:`.alert-card[data-alert-id='${id}']`; const item=document.querySelector(sel); if(item) item.classList.add('processing'); if(btn) btn.disabled=true; fetch(`/data/api/alerts/${id}/ack`,{method:'POST'}).then(r=>r.json()).then(resp=>{ if(!resp.success){ if(item) item.classList.remove('processing'); if(btn) btn.disabled=false; alert(resp.message||'确认失败'); return; } if(item){ item.classList.add('acknowledged'); setTimeout(()=>{ item.remove(); fetchAlerts(true); if(deviceId) openDeviceAlerts(deviceId); },160); } }).catch(e=>{ if(item) item.classList.remove('processing'); if(btn) btn.disabled=false; alert('确认错误: '+e.message); }); }
  function ignoreAlert(id, btn, deviceId){ if(!id) return; const sel=deviceId?`.dap-item[data-alert-id='${id}']`:`.alert-card[data-alert-id='${id}']`; const item=document.querySelector(sel); if(item) item.classList.add('processing'); if(btn) btn.disabled=true; fetch(`/data/api/alerts/${id}/ignore`,{method:'POST'}).then(r=>r.json()).then(resp=>{ if(!resp.success){ if(item) item.classList.remove('processing'); if(btn) btn.disabled=false; alert(resp.message||'忽略失败'); return; } if(item){ item.classList.add('ignored'); setTimeout(()=>{ item.remove(); fetchAlerts(true); if(deviceId) openDeviceAlerts(deviceId); },120); } }).catch(e=>{ if(item) item.classList.remove('processing'); if(btn) btn.disabled=false; alert('忽略错误: '+e.message); }); }
  function formatTs(ts){ try{ const d=new Date(ts); if(!isFinite(d.getTime())) return ''; return d.getHours().toString().padStart(2,'0')+':'+d.getMinutes().toString().padStart(2,'0'); }catch(e){ return ''; }}
  function escapeHtml(str){ return String(str).replace(/[&<>\"]/g,s=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[s])); }
  document.addEventListener('visibilitychange',()=>{ if(document.visibilityState==='visible'){ fetchAlerts(true); }});
  if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', init); else init();
  // 导出所需函数供外部 onclick 使用
  Object.assign(global,{ openDeviceAlerts, closeDeviceAlerts, fetchAlerts, toggleGlobalAlerts });
})(window);
