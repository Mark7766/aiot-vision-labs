/* Data (Real-time dashboard) large script extracted (restored + chart mode toggle) */
(function(global){
  'use strict';
  const C = global.AiotCommon || {};
  let auto=false,timer=null; const DRAWER_REFRESH_MS=1000; let drawerOpen=false,currentDeviceId=null,currentTagId=null,currentTagName='';
  // Drawer resize state (added)
  let drawerResizeBound=false, drawerResizeActive=false, drawerStartX=0, drawerStartWidth=0; const DRAWER_MIN_W=360, DRAWER_DEFAULT_W=480, DRAWER_MAX_PAD=60; let lastDrawerWidth=null;
  function clampDrawerWidth(px){ const max=Math.max(DRAWER_MIN_W, window.innerWidth-DRAWER_MAX_PAD); return Math.min(Math.max(px,DRAWER_MIN_W), max); }
  function applyStoredDrawerWidth(){ try{ const v=parseInt(localStorage.getItem('drawerWidth')||'',10); if(!isNaN(v)){ const drawer=document.querySelector('.drawer'); if(drawer){ const w=clampDrawerWidth(v); drawer.style.width=w+'px'; lastDrawerWidth=w; } } }catch(e){} }
  function initDrawerResizer(){ if(drawerResizeBound) return; const handle=document.getElementById('drawerResizer'); const drawer=document.querySelector('.drawer'); if(!handle||!drawer) return; drawerResizeBound=true; const start=(x)=>{ drawerResizeActive=true; drawerStartX=x; drawerStartWidth=drawer.getBoundingClientRect().width; drawer.classList.add('resizing'); document.addEventListener('mousemove',move); document.addEventListener('mouseup',up); document.addEventListener('mouseleave',up); };
    const move=(e)=>{ if(!drawerResizeActive) return; const delta = drawerStartX - e.clientX; let w = clampDrawerWidth(drawerStartWidth + delta); drawer.style.width=w+'px'; lastDrawerWidth=w; try{ localStorage.setItem('drawerWidth', String(w)); }catch(err){} };
    const up=()=>{ if(!drawerResizeActive) return; drawerResizeActive=false; drawer.classList.remove('resizing'); document.removeEventListener('mousemove',move); document.removeEventListener('mouseup',up); document.removeEventListener('mouseleave',up); };
    handle.addEventListener('mousedown', e=>{ e.preventDefault(); start(e.clientX); });
    handle.addEventListener('dblclick', ()=>{ const w=DRAWER_DEFAULT_W; const d=document.querySelector('.drawer'); if(d){ d.style.width=w+'px'; lastDrawerWidth=w; try{ localStorage.setItem('drawerWidth', String(w)); }catch(err){} } });
    window.addEventListener('resize', ()=>{ if(lastDrawerWidth!=null){ const d=document.querySelector('.drawer'); if(d){ d.style.width=clampDrawerWidth(lastDrawerWidth)+'px'; } } });
  }
  let prediction=null; // {points:[{t,y}]}
  let drawerInterval=null; let drawerFetchInFlight=false; let chartMeta=null; // {tMin,tMax,yMin,yMax,pts,fpts,hPix,fPix}
  let hoverBound=false; let predicting=false; let compareCollapsed=true; let showPrediction=true;
  // Elements helper
  function id(x){ return document.getElementById(x); }

  function toggleAuto(){
    auto = !auto; const btn = id('autoBtn'); if(!btn) return; btn.setAttribute('aria-pressed', auto ? 'true' : 'false');
    const labelEl = btn.querySelector('.visually-hidden'); const statusEl = id('autoStatus'); const liveEl = id('autoLive');
    if(auto){ btn.classList.add('active'); btn.title='关闭自动刷新'; btn.setAttribute('aria-label','关闭自动刷新'); if(labelEl) labelEl.textContent='关闭自动刷新'; if(statusEl){ statusEl.style.display='inline-flex'; statusEl.setAttribute('aria-hidden','false'); } if(liveEl) liveEl.textContent='自动刷新已开启，每5秒更新'; fetchAndRender(); timer=setInterval(fetchAndRender,5000); }
    else { btn.classList.remove('active'); btn.title='开启自动刷新'; btn.setAttribute('aria-label','开启自动刷新'); if(labelEl) labelEl.textContent='开启自动刷新'; if(timer) clearInterval(timer); if(statusEl){ statusEl.style.display='none'; statusEl.setAttribute('aria-hidden','true'); } if(liveEl) liveEl.textContent='自动刷新已关闭'; }
  }
  function escHtml(str){ return C.escHtml?C.escHtml(str):(str==null?'':String(str)); }

  let tagPagerState={};
  function ensureTagState(deviceId,tags){ if(!tagPagerState[deviceId]) tagPagerState[deviceId]={all:tags||[],filters:{name:'',address:'',value:''},page:1,pageSize:10}; else if(tags){ tagPagerState[deviceId].all=tags; } return tagPagerState[deviceId]; }
  // Added: build state from initial SSR rendered rows (first page) so filters work before first fetch
  function buildTagStateFromDOM(deviceId){ if(tagPagerState[deviceId]) return tagPagerState[deviceId]; const card=document.querySelector(`.card[data-device-id='${deviceId}']`); if(!card) return null; const body=card.querySelector(`#tagBody-${deviceId}`); if(!body) return null; const rows=[...body.querySelectorAll('.tag-row')]; if(!rows.length) return ensureTagState(deviceId, []); const tags=rows.map(r=>{ const cells=r.querySelectorAll('td'); return { id: r.getAttribute('data-tag-id')||'', name: (cells[0]?.textContent||'').trim(), address: (cells[1]?.textContent||'').trim(), value: (cells[2]?.textContent||'').trim() }; }); return ensureTagState(deviceId, tags); }
  function applyTagFilters(st){ const {filters}=st; const fName=filters.name.trim().toLowerCase(); const fAddr=filters.address.trim().toLowerCase(); const fVal=filters.value.trim().toLowerCase(); let list=st.all; if(fName) list=list.filter(t=>(t.name||'').toLowerCase().includes(fName)); if(fAddr) list=list.filter(t=>(t.address||'').toLowerCase().includes(fAddr)); if(fVal) list=list.filter(t=> String(t.value??'').toLowerCase().includes(fVal)); return list; }
  function renderDeviceTags(deviceId){ const body=id('tagBody-'+deviceId); const pagerBox=id('tagPager-'+deviceId); if(!body) return; let st=tagPagerState[deviceId]; if(!st){ st=buildTagStateFromDOM(deviceId); }
    if(!st){ body.innerHTML='<tr><td colspan="3" class="text-dim" style="padding:.35rem .3rem;">无数据</td></tr>'; return; }
    const filtered=applyTagFilters(st); const total=filtered.length; const pages=Math.max(1, Math.ceil(total/st.pageSize)); if(st.page>pages) st.page=pages; const start=(st.page-1)*st.pageSize; const slice=filtered.slice(start,start+st.pageSize); body.innerHTML = slice.length? slice.map(t=>`<tr class='tag-row' data-device-id='${deviceId}' data-tag-id='${t.id??''}' data-tag-name='${escHtml(t.name??'')}' onclick='event.stopPropagation();'><td>${escHtml(t.name)}</td><td>${escHtml(t.address||'')}</td><td style='font-family:var(--font-mono);'>${escHtml(t.value||'')}</td></tr>`).join('') : '<tr><td colspan="3" class="text-warn" style="padding:.4rem;">无匹配结果</td></tr>'; attachTagRowEvents(body); if(pagerBox){ if(total<=st.pageSize) pagerBox.style.display='none'; else { pagerBox.style.display='flex'; pagerBox.querySelector('.pager-info').textContent=`${st.page} / ${pages} (共${total})`; pagerBox.querySelector('.pager-prev').disabled=st.page<=1; pagerBox.querySelector('.pager-next').disabled=st.page>=pages; } } updateFilterIndicators(deviceId); }
  function updateFilterIndicators(deviceId){ const st=tagPagerState[deviceId]; if(!st) return; ['name','address','value'].forEach(col=>{ const btn=document.querySelector(`#filterBtn-${col}-${deviceId}`); if(btn){ if(st.filters[col]) btn.classList.add('active-filter'); else btn.classList.remove('active-filter'); } }); }
  function openFilterPop(deviceId,col){ // ensure state exists (SSR fallback)
    if(!tagPagerState[deviceId]) buildTagStateFromDOM(deviceId); const pop=id(`filterPop-${col}-${deviceId}`); if(!pop) return; const visible=pop.getAttribute('data-open')==='1'; document.querySelectorAll(`.filter-pop[data-device='${deviceId}']`).forEach(p=>{ p.style.display='none'; p.setAttribute('data-open','0'); }); if(!visible){ pop.style.position='absolute'; pop.style.top='100%'; pop.style.left='0'; pop.style.background='#0d1f29'; pop.style.border='1px solid var(--color-border)'; pop.style.borderRadius='4px'; pop.style.padding='4px'; pop.style.zIndex='10'; pop.style.minWidth='120px'; pop.style.display='block'; pop.setAttribute('data-open','1'); const st=tagPagerState[deviceId]; const input=pop.querySelector('input'); if(input&&st) input.value=st.filters[col]||''; const actions=pop.querySelector('.fp-actions'); if(actions){ actions.style.display='flex'; actions.style.gap='2px'; } setTimeout(()=>input&&input.focus(),10); } }
  function applyFilter(deviceId,col){ if(!tagPagerState[deviceId]) buildTagStateFromDOM(deviceId); const st=tagPagerState[deviceId]; if(!st) return; const pop=id(`filterPop-${col}-${deviceId}`); if(pop){ const val=pop.querySelector('input').value; st.filters[col]=val; st.page=1; pop.style.display='none'; pop.setAttribute('data-open','0'); renderDeviceTags(deviceId); } }
  function clearFilter(deviceId,col){ if(!tagPagerState[deviceId]) buildTagStateFromDOM(deviceId); const st=tagPagerState[deviceId]; if(!st) return; st.filters[col]=''; st.page=1; renderDeviceTags(deviceId); const pop=id(`filterPop-${col}-${deviceId}`); if(pop){ const inp=pop.querySelector('input'); if(inp) inp.value=''; pop.style.display='none'; pop.setAttribute('data-open','0'); } }
  function changeTagPage(deviceId,delta){ const st=tagPagerState[deviceId]; if(!st) return; st.page+=delta; if(st.page<1) st.page=1; renderDeviceTags(deviceId); }
  // Added: attach single-click & keyboard handlers for tag rows to open history drawer
  function attachTagRowEvents(scope){ const rows = (scope? scope.querySelectorAll('.tag-row'): document.querySelectorAll('.tag-row')); rows.forEach(row=>{ if(row._tagBound) return; row._tagBound=true; if(!row.hasAttribute('tabindex')) row.tabIndex=0; row.style.cursor='pointer'; const did=row.getAttribute('data-device-id'); const tid=row.getAttribute('data-tag-id'); const name=row.getAttribute('data-tag-name')||''; const open=()=>{ if(!tid) return; if(document.body.classList.contains('edit-mode')) return; if(drawerOpen && currentDeviceId===did && currentTagId===tid) return; try { openDrawer(did, tid, name); } catch(e){ console.warn('openDrawer failed',e); } }; row.addEventListener('click', open); row.addEventListener('keydown', e=>{ if(e.key==='Enter'||e.key===' '){ e.preventDefault(); open(); } }); }); }

  function fetchAndRender(){ fetch('/data/api/latest').then(r=>r.json()).then(list=>{ const existingGrid=document.querySelector('.grid'); if(!list || !list.length){ // show placeholder
        if(existingGrid) existingGrid.remove(); showNoDevicePlaceholder(); updateDeviceCount(0); const lastRefresh=id('lastRefresh'); if(lastRefresh) lastRefresh.textContent='最后刷新: '+new Date().toLocaleTimeString(); return; }
      // ensure grid exists
      const grid = ensureGridContainer(); grid.innerHTML=''; hideNoDevicePlaceholder(); const editOn=document.body.classList.contains('edit-mode'); list.forEach(dev=>{ const card=document.createElement('div'); card.className='card'; card.dataset.deviceId=dev.deviceId; card.dataset.deviceName=dev.deviceName; card.dataset.deviceProtocol=dev.protocol; card.dataset.deviceConn=dev.connectionString; const connOk=dev.connectionOk===true; ensureTagState(dev.deviceId, dev.tags||[]); card.innerHTML=`<div class='dev-actions' style='position:absolute;top:.35rem;right:.35rem;display:flex;gap:.35rem;'>
          <button type='button' class='delete-x btn-icon danger edit-only' title='删除设备' aria-label='删除设备' onclick='deleteDevice(${dev.deviceId},this);event.stopPropagation();'><svg viewBox='0 0 24 24' aria-hidden='true'><path d='M6 7h12M10 7V5h4v2m-7 0v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V7M9 11v6M15 11v6' stroke-linecap='round' stroke-linejoin='round'/></svg><span class='visually-hidden'>删除设备</span></button>
        </div>
        <div class='device-title' style='display:flex;align-items:center;gap:.4rem;margin:0 0 .1rem;'>
          <h3 style='margin:0;padding-right:2.2rem;'>${escHtml(dev.deviceName)}</h3>
          <button type='button' class='btn-icon edit-only' title='编辑设备' aria-label='编辑设备' onclick='openEditDevice(${dev.deviceId});event.stopPropagation();'><svg viewBox='0 0 24 24' aria-hidden='true'><path d='M4 17.5V20h2.5L17.81 8.69a1 1 0 0 0 0-1.41L15.72 5.19a1 1 0 0 0-1.41 0L5.5 14.5M13.5 6.5l2 2' stroke-linecap='round' stroke-linejoin='round'/></svg><span class='visually-hidden'>编辑设备</span></button>
        </div>
        <p class='text-dim' style='margin:0.3rem 0;font-size:.7rem;letter-spacing:.5px;'>协议: ${escHtml(dev.protocol||'')} | 连接: <strong style='color:${connOk?'var(--color-ok)':'var(--color-danger)'};'>${connOk?'正常':'失败'}</strong></p><div class='inline-actions' style='margin:0.3rem 0;flex-wrap:wrap;gap:.4rem;'><button type='button' class='btn-icon ok edit-only' title='添加点位' aria-label='添加点位' onclick='openNamespaces(${dev.deviceId});event.stopPropagation();'><svg viewBox='0 0 24 24' aria-hidden='true'><path d='M12 5v14M5 12h14' stroke-linecap='round'/></svg><span class='visually-hidden'>添加点位</span></button><button type='button' class='btn-icon edit-only' title='编辑点位' aria-label='编辑点位' onclick='openEditTags(${dev.deviceId});event.stopPropagation();'><svg viewBox='0 0 24 24' aria-hidden='true'><path d='M4 17.5V20h2.5L17.81 8.69a1 1 0 0 0 0-1.41L15.72 5.19a1 1 0 0 0-1.41 0L5.5 14.5M13.5 6.5l2 2' stroke-linecap='round' stroke-linejoin='round'/></svg><span class='visually-hidden'>编辑点位</span></button></div>
          <table class='table tags-table' style='font-size:.72rem;position:relative;'>
            <thead><tr>
              <th style='width:40%;position:relative;'>Tag <button type='button' class='filter-btn edit-only' id='filterBtn-name-${dev.deviceId}' onclick='openFilterPop(${dev.deviceId},"name");event.stopPropagation();' aria-label='过滤名称'><svg viewBox='0 0 24 24'><path d='M4 5h16L14 13v6l-4-2v-4z' stroke-linecap='round' stroke-linejoin='round'/></svg></button>
                <div class='filter-pop' data-device='${dev.deviceId}' id='filterPop-name-${dev.deviceId}' data-open='0'>
                  <input type='text' placeholder='包含...'/>
                  <div class='fp-actions'>
                    <button type='button' class='fp-apply btn-icon' onclick='applyFilter(${dev.deviceId},"name")' title='确定' aria-label='确定'><svg viewBox='0 0 24 24' aria-hidden='true'><path d='M5 13l4 4L19 7' stroke-linecap='round' stroke-linejoin='round'/></svg><span class='visually-hidden'>确定</span></button>
                    <button type='button' class='fp-clear btn-icon' onclick='clearFilter(${dev.deviceId},"name")' title='清除' aria-label='清除'><svg viewBox='0 0 24 24' aria-hidden='true'><path d='M6 6l12 12M18 6l-12 12' stroke-linecap='round' stroke-linejoin='round'/></svg><span class='visually-hidden'>清除</span></button>
                  </div>
                </div>
              </th>
              <th style='width:30%;position:relative;'>地址 <button type='button' class='filter-btn edit-only' id='filterBtn-address-${dev.deviceId}' onclick='openFilterPop(${dev.deviceId},"address");event.stopPropagation();' aria-label='过滤地址'><svg viewBox='0 0 24 24'><path d='M4 5h16L14 13v6l-4-2v-4z' stroke-linecap='round' stroke-linejoin='round'/></svg></button>
                <div class='filter-pop' data-device='${dev.deviceId}' id='filterPop-address-${dev.deviceId}' data-open='0'>
                  <input type='text' placeholder='包含...'/>
                  <div class='fp-actions'>
                    <button type='button' class='fp-apply btn-icon' onclick='applyFilter(${dev.deviceId},"address")' title='确定' aria-label='确定'><svg viewBox='0 0 24 24' aria-hidden='true'><path d='M5 13l4 4L19 7' stroke-linecap='round' stroke-linejoin='round'/></svg><span class='visually-hidden'>确定</span></button>
                    <button type='button' class='fp-clear btn-icon' onclick='clearFilter(${dev.deviceId},"address")' title='清除' aria-label='清除'><svg viewBox='0 0 24 24' aria-hidden='true'><path d='M6 6l12 12M18 6l-12 12' stroke-linecap='round' stroke-linejoin='round'/></svg><span class='visually-hidden'>清除</span></button>
                  </div>
                </div>
              </th>
              <th style='width:30%;position:relative;'>值 <button type='button' class='filter-btn edit-only' id='filterBtn-value-${dev.deviceId}' onclick='openFilterPop(${dev.deviceId},"value");event.stopPropagation();' aria-label='过滤数值'><svg viewBox='0 0 24 24'><path d='M4 5h16L14 13v6l-4-2v-4z' stroke-linecap='round' stroke-linejoin='round'/></svg></button>
                <div class='filter-pop' data-device='${dev.deviceId}' id='filterPop-value-${dev.deviceId}' data-open='0'>
                  <input type='text' placeholder='包含...'/>
                  <div class='fp-actions'>
                    <button type='button' class='fp-apply btn-icon' onclick='applyFilter(${dev.deviceId},"value")' title='确定' aria-label='确定'><svg viewBox='0 0 24 24' aria-hidden='true'><path d='M5 13l4 4L19 7' stroke-linecap='round' stroke-linejoin='round'/></svg><span class='visually-hidden'>确定</span></button>
                    <button type='button' class='fp-clear btn-icon' onclick='clearFilter(${dev.deviceId},"value")' title='清除' aria-label='清除'><svg viewBox='0 0 24 24' aria-hidden='true'><path d='M6 6l12 12M18 6l-12 12' stroke-linecap='round' stroke-linejoin='round'/></svg><span class='visually-hidden'>清除</span></button>
                  </div>
                </div>
              </th>
            </tr></thead>
            <tbody id='tagBody-${dev.deviceId}'><tr><td colspan='3' class='text-dim' style='padding:.35rem .3rem;'>加载中...</td></tr></tbody>
          </table>
          <div class='tag-pagination' id='tagPager-${dev.deviceId}' style='display:none;'>
            <button type='button' class='btn-icon pager-prev' aria-label='上一页' onclick='changeTagPage(${dev.deviceId},-1)'><svg viewBox='0 0 24 24'><path d='M14 6l-6 6 6 6' stroke-linecap='round' stroke-linejoin='round'/></svg></button>
            <span class='pager-info'>1 / 1</span>
            <button type='button' class='btn-icon pager-next' aria-label='下一页' onclick='changeTagPage(${dev.deviceId},1)'><svg viewBox='0 0 24 24'><path d='M10 6l6 6-6 6' stroke-linecap='round' stroke-linejoin='round'/></svg></button>
          </div>`; grid.appendChild(card); renderDeviceTags(dev.deviceId); if(!editOn){ card.querySelectorAll('.edit-only').forEach(e=>e.style.display=''); } }); id('lastRefresh').textContent='最后刷新: '+new Date().toLocaleTimeString(); updateDeviceCount(list.length); if(auto){ const st=id('autoStatus'); if(st){ st.classList.add('fetch'); setTimeout(()=>st.classList.remove('fetch'),280); } } }).catch(err=>console.error('刷新失败',err)); }
  // Helper added for dynamic grid / placeholder
  function ensureGridContainer(){ let grid=document.querySelector('.grid'); if(!grid){ grid=document.createElement('div'); grid.className='grid'; const toolbar=document.getElementById('dashToolbar'); if(toolbar && toolbar.parentNode){ toolbar.parentNode.insertBefore(grid, toolbar.nextSibling); } else { document.body.appendChild(grid); } } return grid; }
  function showNoDevicePlaceholder(){ if(document.getElementById('noDeviceCard')) return; const card=document.createElement('div'); card.id='noDeviceCard'; card.className='card'; card.innerHTML="<p class='text-dim' style='margin:.2rem 0 .6rem;font-size:.75rem;'>暂无设备。使用右下角 “＋” 添加。</p>"; const toolbar=document.getElementById('dashToolbar'); if(toolbar && toolbar.parentNode){ toolbar.parentNode.insertBefore(card, toolbar.nextSibling); } else { document.body.appendChild(card); } }
  function hideNoDevicePlaceholder(){ const ph=document.getElementById('noDeviceCard'); if(ph) ph.remove(); }
  function deviceCardCount(){ return document.querySelectorAll('.card[data-device-id]').length; }
  function openDrawer(did,tid,name){ stopDrawerAuto(); currentDeviceId=did; currentTagId=tid; currentTagName=name||''; prediction=null; chartMeta=null; hoverBound=false; id('drawerTitle').textContent=`${name||'标签'} 历史趋势`; const overlay=id('drawerOverlay'); overlay.style.display='block'; overlay.setAttribute('aria-hidden','false'); drawerOpen=true; applyStoredDrawerWidth(); initDrawerResizer(); loadHistory(); startDrawerAuto(); }
  function startDrawerAuto(){ stopDrawerAuto(); drawerInterval=setInterval(()=>refreshDrawerHistory(), DRAWER_REFRESH_MS); }
  function stopDrawerAuto(){ if(drawerInterval){ clearInterval(drawerInterval); drawerInterval=null; } }
  function refreshDrawerHistory(){ if(!drawerOpen||!currentDeviceId||!currentTagId) return; if(drawerFetchInFlight) return; drawerFetchInFlight=true; fetch(`/data/api/history/${currentDeviceId}/${currentTagId}`).then(r=>r.json()).then(list=>{ renderHistory(list); const tm=id('drawerUpdateTime'); if(tm) tm.textContent=new Date().toLocaleTimeString(); }).catch(()=>{}).finally(()=>{ drawerFetchInFlight=false; }); }
  function closeDrawer(){ const overlay=id('drawerOverlay'); overlay.style.display='none'; overlay.setAttribute('aria-hidden','true'); drawerOpen=false; prediction=null; chartMeta=null; stopDrawerAuto(); }
  function loadHistory(){ const body=id('drawerTableBody'); body.innerHTML='<tr><td colspan="2" style="padding:6px;" class="text-dim">加载中...</td></tr>'; fetch(`/data/api/history/${currentDeviceId}/${currentTagId}`).then(r=>r.json()).then(list=>{ renderHistory(list); }).catch(()=>{ body.innerHTML='<tr><td colspan="2" style="padding:6px;color:var(--color-danger);">加载失败</td></tr>'; }); }
  function renderHistory(entries){ const body=id('drawerTableBody'); if(!entries||!entries.length){ body.innerHTML='<tr><td colspan="2" style="padding:6px;" class="text-dim">暂无数据</td></tr>'; drawChart([]); return; } // table: 倒序
    const desc=[...entries].sort((a,b)=> new Date(b.timestamp)-new Date(a.timestamp)); body.innerHTML=desc.map(e=>`<tr><td>${e.timestamp||''}</td><td>${e.value||''}</td></tr>`).join(''); drawChart(entries); }

  function resizeDrawerCanvas(canvas){ const ratio=Math.max(global.devicePixelRatio||1,1); const rect=canvas.getBoundingClientRect(); const tw=Math.floor(rect.width*ratio); const th=Math.floor(rect.height*ratio); if(canvas.width!==tw||canvas.height!==th){ canvas.width=tw; canvas.height=th; } }
  function parseData(arr){ return C.parseData?C.parseData(arr):[]; }
  function drawChart(entries){ const canvas=id('drawerCanvas'); if(!canvas) return; resizeDrawerCanvas(canvas); const ctx=canvas.getContext('2d'); const W=canvas.width,H=canvas.height; ctx.clearRect(0,0,W,H); let pts=parseData(entries);
    if(pts.length>1){ pts=pts.slice().sort((a,b)=>a.t-b.t); }
    const allPred=(prediction&&prediction.points)||[]; const fpts = (showPrediction? allPred: []); const hint=id('drawerHint'); if(!pts.length){ hint.style.display='block'; hint.textContent='暂无历史数值数据'; chartMeta=null; updateAccuracy(); updateCompareTable(); updateLegend(); return; } hint.style.display='none'; const used = fpts.length? pts.concat(fpts): pts; const tMin=Math.min(...used.map(p=>p.t)); const tMax=Math.max(...used.map(p=>p.t)); let yMin=Math.min(...used.map(p=>p.y)); let yMax=Math.max(...used.map(p=>p.y)); if(yMin===yMax){ yMin-=1; yMax+=1; } const pad=(yMax-yMin)*0.08; yMin-=pad; yMax+=pad; const L=54,R=18,T=14,B=36; ctx.strokeStyle='rgba(0,191,255,0.25)'; ctx.strokeRect(L,T,W-L-R,H-T-B); ctx.font=`${11*(global.devicePixelRatio||1)}px monospace`; ctx.textAlign='right'; ctx.textBaseline='middle'; for(let i=0;i<=4;i++){ const yy=T+(H-T-B)*(i/4); const v=yMax-(yMax-yMin)*(i/4); ctx.strokeStyle='rgba(0,191,255,0.10)'; ctx.beginPath(); ctx.moveTo(L,yy); ctx.lineTo(W-R,yy); ctx.stroke(); ctx.fillStyle='#7fdcff'; ctx.fillText(v.toFixed(2),L-6,yy); }
    ctx.textAlign='center'; ctx.textBaseline='top'; for(let i=0;i<=4;i++){ const ratio=i/4; const xx=L+(W-L-R)*ratio; const tt=new Date(tMin+(tMax-tMin)*ratio); const label=`${tt.getHours().toString().padStart(2,'0')}:${tt.getMinutes().toString().padStart(2,'0')}:${tt.getSeconds().toString().padStart(2,'0')}`; ctx.fillStyle='#7fdcff'; ctx.fillText(label,xx,H-B+4); }
    const ratioDP=(global.devicePixelRatio||1); const hPix=[], fPix=[]; function line(points,color,dashed){ ctx.save(); ctx.setLineDash(dashed?[5,4]:[]); ctx.strokeStyle=color; ctx.lineWidth=2; ctx.beginPath(); for(let i=0;i<points.length;i++){ const p=points[i]; const xr=(tMax===tMin)?(i/(Math.max(points.length-1,1))):((p.t-tMin)/(tMax-tMin)); const x=L+(W-L-R)*xr; const yr=(p.y-yMin)/(yMax-yMin); const y=H-B-(H-T-B)*yr; (points===pts?hPix:fPix).push({x,y,t:p.t,yValue:p.y}); if(i===0) ctx.moveTo(x,y); else ctx.lineTo(x,y);} ctx.stroke(); ctx.fillStyle=color; for(const pp of (points===pts?hPix:fPix)){ ctx.beginPath(); ctx.arc(pp.x,pp.y,2.1*ratioDP,0,Math.PI*2); ctx.fill(); } ctx.restore(); }
    line(pts,'#00bfff',false); if(fpts.length) line(fpts,'#ffa500',true);
    chartMeta={tMin,tMax,yMin,yMax,L,R,T,B,W,H,pts,fpts,hPix,fPix}; updateAccuracy(); updateCompareTable(); updateLegend(); initHover(); }
  function updateLegend(){ const lp=id('legendPred'); if(lp){ const hasPred = prediction&&prediction.points&&prediction.points.length; lp.style.display = hasPred?'flex':'none'; if(hasPred){ lp.style.opacity = showPrediction? '1':'0.35'; lp.style.cursor='pointer'; lp.setAttribute('aria-pressed', showPrediction? 'true':'false'); } } attachLegendEvents(); }
  function attachLegendEvents(){ const lp=id('legendPred'); if(!lp) return; if(lp._bound) return; lp._bound=true; const toggle=()=>{ if(!(prediction&&prediction.points&&prediction.points.length)) return; showPrediction=!showPrediction; const rows=[...document.querySelectorAll('#drawerTableBody tr')].map(r=>({timestamp:r.children[0]?.textContent,value:r.children[1]?.textContent})); drawChart(rows); }; lp.addEventListener('click',toggle); lp.addEventListener('keydown',e=>{ if(e.key==='Enter'||e.key===' '){ e.preventDefault(); toggle(); }}); }
  function updateAccuracy(){ const box=id('metricBox'); if(!box) return; if(!prediction||!prediction.points||!chartMeta||!chartMeta.pts){ box.style.display='none'; box.innerHTML=''; return; } const pts=chartMeta.pts,fpts=prediction.points; if(!pts.length||!fpts.length){ box.style.display='none'; box.innerHTML=''; return; } const map=new Map(); for(const p of pts) map.set(p.t,p.y); const matched=[]; for(const fp of fpts){ if(map.has(fp.t)) matched.push({pred:fp.y,actual:map.get(fp.t)}); } if(!matched.length){ box.style.display='none'; box.innerHTML=''; return; } let se=0,ae=0; const absActs=[]; for(const m of matched){ const a=Math.abs(m.actual); if(a>0) absActs.push(a); } absActs.sort((a,b)=>a-b); const mid=Math.floor(absActs.length/2); const med=absActs.length?(absActs.length%2?absActs[mid]:(absActs[mid-1]+absActs[mid])/2):0; const eps=Math.max(1e-6, med*0.01); let mapeSum=0,mapeCnt=0,wAbsErr=0,wAbsAct=0; for(const m of matched){ const err=m.actual-m.pred; const a=Math.abs(m.actual); ae+=Math.abs(err); se+=err*err; if(a>=eps){ mapeSum+=Math.abs(err)/a; mapeCnt++; wAbsAct+=a; wAbsErr+=Math.abs(err); } } const n=matched.length; const mae=ae/n; const rmse=Math.sqrt(se/n); const mape=mapeCnt?(mapeSum/mapeCnt*100):null; const wape=wAbsAct?(wAbsErr/wAbsAct*100):null; box.innerHTML=`预测指标: <small>样本=${n}</small> | <small>MAE=${mae.toFixed(3)}</small> | <small>RMSE=${rmse.toFixed(3)}</small> | <small>MAPE=${mape!=null?mape.toFixed(2)+'%':'NA'}</small> | <small>WAPE=${wape!=null?wape.toFixed(2)+'%':'NA'}</small>`; box.style.display=''; }
  function updateCompareTable(){ const wrap=id('compareTableWrap'); const tbody=id('compareTBody'); const count=id('compareCount'); if(!wrap||!tbody){ return; } if(!prediction||!prediction.points||!chartMeta||!chartMeta.pts||!chartMeta.pts.length){ tbody.innerHTML='<tr><td colspan="6" class="text-dim" style="padding:4px;">暂无数据</td></tr>'; if(count) count.textContent=''; return; }
    // 仅在预测点时间戳存在完全匹配历史点时才展示对比，避免“未来”预测误配上一条历史
    const histMap=new Map(); chartMeta.pts.forEach(p=>histMap.set(p.t,p.y)); const rows=[]; for(const p of prediction.points){ if(histMap.has(p.t)){ const hy=histMap.get(p.t); const diff=p.y-hy; const perc=hy!==0? diff/hy*100:null; rows.push({pt:p,hy,diff,perc}); } }
    if(!rows.length){ tbody.innerHTML='<tr><td colspan="6" class="text-dim" style="padding:4px;">暂无重叠时间点</td></tr>'; if(count) count.textContent=''; return; }
    tbody.innerHTML=rows.map(r=>`<tr><td>${fmtTs(r.pt.t)}</td><td>${fmtNum(r.pt.y)}</td><td>${fmtTs(r.pt.t)}</td><td>${fmtNum(r.hy)}</td><td>${fmtNum(r.diff)}</td><td>${r.perc!=null?fmtNum(r.perc)+'%':'--'}</td></tr>`).join(''); if(count) count.textContent=`${rows.length}条`; }
  function toggleCompareCollapse(){ compareCollapsed=!compareCollapsed; const wrap=id('compareTableWrap'); const icon=id('compareCollapseIcon'); const header=id('compareCollapseHeader'); if(wrap){ wrap.style.display= compareCollapsed? 'none':'block'; if(!compareCollapsed){ updateCompareTable(); } } if(icon){ icon.textContent= compareCollapsed? '▼':'▲'; } if(header){ header.setAttribute('aria-expanded', (!compareCollapsed).toString()); } }
  function fmtNum(v){ if(v==null||isNaN(v)) return '--'; const av=Math.abs(v); const d = av>=1000?0: (av>=100?1:(av>=10?2:3)); return Number(v).toFixed(d); }
  function fmtTs(t){ const dt=new Date(t); return `${dt.getHours().toString().padStart(2,'0')}:${dt.getMinutes().toString().padStart(2,'0')}:${dt.getSeconds().toString().padStart(2,'0')}`; }
  function initHover(){ if(hoverBound) return; const canvas=id('drawerCanvas'); const tip=id('drawerTooltip'); const vLine=id('chartCrosshairV'); if(!canvas||!tip||!vLine) return; hoverBound=true; function hide(){ tip.style.display='none'; vLine.style.display='none'; }
    function nearest(x){ if(!chartMeta) return null; const all=[]; (chartMeta.hPix||[]).forEach(p=>all.push({...p,type:'h'})); (chartMeta.fPix||[]).forEach(p=>all.push({...p,type:'f'})); if(!all.length) return null; let best=null; for(const p of all){ const dx=Math.abs(p.x-x); if(!best||dx<best.dx) best={dx,p}; } return best?.p||null; }
    canvas.addEventListener('mouseleave',hide); canvas.addEventListener('mousemove',e=>{ if(!chartMeta){ hide(); return; } const rect=canvas.getBoundingClientRect(); const scaleX=canvas.width/rect.width; const x=(e.clientX-rect.left)*scaleX; const pick=nearest(x); if(!pick){ hide(); return; } vLine.style.left=(pick.x/canvas.width*100)+'%'; vLine.style.display='block'; const histExact=(chartMeta.hPix||[]).find(p=>p.t===pick.t); const predExact=(chartMeta.fPix||[]).find(p=>p.t===pick.t); let html=''; const ts = fmtTs(pick.t); if(histExact && predExact){ const diff=predExact.yValue-histExact.yValue; const perc=histExact.yValue!==0? diff/histExact.yValue*100:null; html=`<div><strong>${ts}</strong></div><div>预测: <span style='color:#ffa500;'>${fmtNum(predExact.yValue)}</span></div><div>历史: <span style='color:#00bfff;'>${fmtNum(histExact.yValue)}</span></div><div>差值: ${fmtNum(diff)}${perc!=null?(' ('+fmtNum(perc)+'%)'):''}</div>`; }
      else if(predExact){ html=`<div><strong>${ts}</strong></div><div>预测: <span style='color:#ffa500;'>${fmtNum(predExact.yValue)}</span></div>`; }
      else if(histExact){ html=`<div><strong>${ts}</strong></div><div>历史: <span style='color:#00bfff;'>${fmtNum(histExact.yValue)}</span></div>`; }
      tip.innerHTML=html; const tRect=tip.getBoundingClientRect(); let left=e.clientX-rect.left; if(left+tRect.width>rect.width) left=rect.width-tRect.width-4; tip.style.left=left+'px'; tip.style.top='4px'; tip.style.display='block'; }); }
  // Prediction (overlay)
  function doPredictInDrawer(){ if(!currentDeviceId||!currentTagId) return; if(predicting) return; predicting=true; const btn=id('predictBtn'); const st=id('predictStatus'); if(btn){ btn.disabled=true; btn.classList.add('loading'); } if(st){ st.style.display=''; st.textContent='预测中...'; }
    fetch(`/data/api/history/${currentDeviceId}/${currentTagId}`).then(r=>r.json()).then(hist=>{ if(Array.isArray(hist)&&hist.length){ const body=id('drawerTableBody'); const desc=[...hist].sort((a,b)=> new Date(b.timestamp)-new Date(a.timestamp)); if(body){ body.innerHTML=desc.map(e=>`<tr><td>${e.timestamp||''}</td><td>${e.value||''}</td></tr>`).join(''); } drawChart(hist); const rows=[...hist]; const parsed=parseData(rows); if(!parsed.length) throw new Error('NO_NUMERIC'); return fetch(`/data/api/predict/${currentDeviceId}/${currentTagId}`); } else { throw new Error('NO_DATA'); } }).then(r=>r.json()).then(data=>{ const raw=Array.isArray(data?.predictionPoints)?data.predictionPoints:[]; const tmp=[]; for(const pp of raw){ if(!pp||!pp.timestamp||!C.isNumeric?.(pp.value)) continue; const t=C.parseTs?C.parseTs(pp.timestamp):Date.parse(pp.timestamp); if(isNaN(t)) continue; tmp.push({t,y:Number(pp.value)}); } tmp.sort((a,b)=>a.t-b.t); prediction=tmp.length?{points:tmp}:null; updateLegend(); const rows=[...document.querySelectorAll('#drawerTableBody tr')].map(r=>({timestamp:r.children[0]?.textContent,value:r.children[1]?.textContent})); drawChart(rows); if(!compareCollapsed) updateCompareTable(); }).catch(err=>{ if(err && err.message==='NO_NUMERIC') alert('当前没有可预测的数值数据'); else if(err && err.message==='NO_DATA') alert('暂无历史数据，无法预测'); else console.warn('预测失败',err); }).finally(()=>{ predicting=false; if(btn){ btn.disabled=false; btn.classList.remove('loading'); btn.title='生成 / 刷新预测 (叠加显示)'; } if(st) st.style.display='none'; }); }
  // Backwards compatibility stub (no-op)
  function setChartMode(){ /* removed segmented modes */ }
  // ==== 动态 UI & 公共辅助函数 ====
  function ensureHost(){ let h=id('dynamicModalHost'); if(!h){ h=document.createElement('div'); h.id='dynamicModalHost'; h.style.position='fixed'; h.style.top='0'; h.style.left='0'; h.style.width='100%'; h.style.height='100%'; h.style.zIndex='3000'; h.style.pointerEvents='none'; document.body.appendChild(h);} return h; }
  function makeOverlay(innerHtml, modalId){ const host=ensureHost(); let wrap=id(modalId); if(!wrap){ wrap=document.createElement('div'); wrap.id=modalId; host.appendChild(wrap);} wrap.innerHTML=`<div class='modal-backdrop' style='position:absolute;inset:0;background:rgba(0,0,0,.42);backdrop-filter:blur(2px);'></div><div class='modal-panel' style='position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:#0d1f29;border:1px solid #123846;min-width:340px;max-width:90%;padding:16px 18px;border-radius:10px;box-shadow:0 8px 28px -4px rgba(0,0,0,.55);'>${innerHtml}</div>`; wrap.style.pointerEvents='auto'; return wrap; }
  function closeModal(modalId){ const el=id(modalId); if(el) el.remove(); if(ensureHost().children.length===0){ ensureHost().remove(); } }
  function btn(label,extra=''){ return `<button type='button' ${extra} class='btn-small' style='padding:4px 10px;border-radius:6px;background:linear-gradient(90deg,#0e3c52,#0c516a);color:#dff;cursor:pointer;border:1px solid #1b6077;font-size:.72rem;'>${label}</button>`; }
  function field(label, idAttr, value='', placeholder=''){ return `<label style='display:flex;flex-direction:column;gap:4px;font-size:.65rem;letter-spacing:.5px;color:#9fd;'>${label}<input id='${idAttr}' value='${escHtml(value)}' placeholder='${placeholder}' style='background:#06212b;border:1px solid #134e60;color:#e9f9ff;padding:6px 8px;border-radius:6px;font-size:.72rem;'/></label>`; }
  function showMsg(el, msg, ok){ if(!el) return; el.textContent=msg; el.style.color= ok? 'var(--color-ok,#27c78b)':'var(--color-danger,#ff5d55)'; }
  function spinner(size=16){ return `<span class='spin' style='display:inline-block;width:${size}px;height:${size}px;border:2px solid #1b6077;border-top-color:#5fd3ff;border-radius:50%;animation:dashSpin 0.8s linear infinite;'></span>`; }
  if(!document.getElementById('dashSpinKeyframes')){ const st=document.createElement('style'); st.id='dashSpinKeyframes'; st.textContent='@keyframes dashSpin{to{transform:rotate(360deg)}}'; document.head.appendChild(st); }

  // ==== 设备新增 (支持静态 modal) ====
  function openAddDeviceModal(){ const staticModal=id('addDeviceModal'); if(staticModal){ staticModal.style.display='flex'; staticModal.setAttribute('aria-hidden','false'); return; }
    const html = `
      <h3 style='margin:0 0 8px;font-size:.9rem;'>新增设备</h3>
      <div style='display:flex;flex-direction:column;gap:10px;'>
        ${field('名称','addDevName','','设备名称')}
        ${field('协议','addDevProtocol','opcua','协议(opcua)')}
        ${field('连接字符串','addDevConn','','如: opc.tcp://127.0.0.1:49320')}
        <div id='addDevMsg' style='min-height:16px;font-size:.6rem;'></div>
        <div style='display:flex;justify-content:flex-end;gap:8px;margin-top:4px;'>
          ${btn('取消','onclick=closeAddDeviceModal()')}
          ${btn('保存','onclick=submitAddDevice() id=\'addDevSubmitBtn\'')}
        </div>
      </div>`; makeOverlay(html,'addDeviceModal'); }
  function closeAddDeviceModal(){ const staticModal=id('addDeviceModal'); if(staticModal && staticModal.classList.contains('modal-overlay')){ staticModal.style.display='none'; staticModal.setAttribute('aria-hidden','true'); if(!staticModal.querySelector('.modal-panel')){ /* static structure */ } return; } closeModal('addDeviceModal'); }
  async function submitAddDevice(){ const nameEl=id('addDevName')||id('devName'); const protocolEl=id('addDevProtocol')||id('devProtocol'); const connEl=id('addDevConn')||id('devConn'); if(!nameEl||!protocolEl||!connEl){ return false; } const name=nameEl.value.trim(); const protocol=protocolEl.value.trim(); const conn=connEl.value.trim(); const msg=id('addDevMsg'); const btnEl=id('addDevSubmitBtn'); if(btnEl) { btnEl.disabled=true; btnEl.textContent='提交中...'; }
    showMsg(msg,'提交中...',true); try {
      const r= await fetch('/data/api/devices',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,protocol,connectionString:conn})}); const js= await r.json(); if(!js.success){ showMsg(msg, js.message||'失败', false); if(btnEl){ btnEl.disabled=false; btnEl.textContent='保存'; } return false; }
      showMsg(msg,'成功',true); fetchAndRender(); closeAddDeviceModal();
    } catch(e){ showMsg(msg, e.message||'错误', false); if(btnEl){ btnEl.disabled=false; btnEl.textContent='保存'; } }
    return false; }

  // ==== 设备编辑 (支持静态 modal) ====
  function openEditDevice(deviceId){ const staticModal=id('editDeviceModal'); if(staticModal){ const card=document.querySelector(`.card[data-device-id='${deviceId}']`); if(card){ const name=card.dataset.deviceName||''; const protocol=card.dataset.deviceProtocol||'opcua'; const conn=card.dataset.deviceConn||''; const nameInput=id('editDevName'); const protocolInput=id('editDevProtocol'); const connInput=id('editDevConn'); const hiddenId=id('editDevId'); if(nameInput) nameInput.value=name; if(protocolInput) protocolInput.value=protocol; if(connInput) connInput.value=conn; if(hiddenId) hiddenId.value=deviceId; staticModal.style.display='flex'; staticModal.setAttribute('aria-hidden','false'); } return; }
    if(id('editDeviceModal')) return; const card=document.querySelector(`.card[data-device-id='${deviceId}']`); if(!card){ alert('未找到设备卡片'); return; } const name=card.dataset.deviceName||''; const protocol=card.dataset.deviceProtocol||'opcua'; const conn=card.dataset.deviceConn||''; const html=`<h3 style='margin:0 0 8px;font-size:.9rem;'>编辑设备 #${deviceId}</h3><div style='display:flex;flex-direction:column;gap:10px;'>${field('名称','editDevName',name)}${field('协议','editDevProtocol',protocol)}${field('连接字符串','editDevConn',conn)}<div id='editDevMsg' style='min-height:16px;font-size:.6rem;'></div><div style='display:flex;justify-content:flex-end;gap:8px;margin-top:4px;'>${btn('取消','onclick=closeEditDeviceModal()')}${btn('保存',`onclick=submitEditDevice(${deviceId}) id='editDevSubmitBtn'`)}</div></div>`; makeOverlay(html,'editDeviceModal'); }
  function closeEditDeviceModal(){ const staticModal=id('editDeviceModal'); if(staticModal && staticModal.classList.contains('modal-overlay')){ staticModal.style.display='none'; staticModal.setAttribute('aria-hidden','true'); return; } closeModal('editDeviceModal'); }
  async function submitEditDevice(deviceId){ const hiddenId=id('editDevId'); if(!deviceId && hiddenId) deviceId=hiddenId.value; const nameEl=id('editDevName'); const protocolEl=id('editDevProtocol'); const connEl=id('editDevConn'); if(!deviceId||!nameEl||!protocolEl||!connEl){ return false; } const name=nameEl.value.trim(); const protocol=protocolEl.value.trim(); const conn=connEl.value.trim(); const msg=id('editDevMsg'); const btnEl=id('editDevSubmitBtn'); if(btnEl){ btnEl.disabled=true; btnEl.textContent='提交中...'; }
    showMsg(msg,'提交中...',true); try { const r=await fetch(`/data/api/devices/${deviceId}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,protocol,connectionString:conn})}); const js=await r.json(); if(!js.success){ showMsg(msg, js.message||'失败', false); if(btnEl){ btnEl.disabled=false; btnEl.textContent='保存'; } return false; }
      showMsg(msg,'更新成功',true); const card=document.querySelector(`.card[data-device-id='${deviceId}']`); if(card){ card.dataset.deviceName=name; card.dataset.deviceProtocol=protocol; card.dataset.deviceConn=conn; const h=card.querySelector('.device-title h3'); if(h) h.textContent=name; }
      setTimeout(()=>closeEditDeviceModal(),150);
    } catch(e){ showMsg(msg, e.message||'错误', false); if(btnEl){ btnEl.disabled=false; btnEl.textContent='保存'; } }
    return false; }

  // ==== 删除设备 ====
  async function deleteDevice(deviceId, btnRef){ if(!confirm('确认删除该设备及其所有点位?')) return; if(btnRef){ btnRef.disabled=true; }
    try { const r=await fetch(`/data/api/devices/${deviceId}`,{method:'DELETE'}); const js=await r.json(); if(!js.success){ alert(js.message||'删除失败'); if(btnRef) btnRef.disabled=false; return; } const card=document.querySelector(`.card[data-device-id='${deviceId}']`); if(card) card.remove(); const count=deviceCardCount(); updateDeviceCount(count); if(count===0){ showNoDevicePlaceholder(); const grid=document.querySelector('.grid'); if(grid) grid.remove(); } } catch(e){ alert('错误: '+e.message); if(btnRef) btnRef.disabled=false; }
  }

  // ==== 命名空间 & 快速添加标记 (Redesigned static modal) ====
  let nsDeviceId=null; let nsNamespaces=[]; let nsActiveIndex=null; let nsLoading=false;
  function openNamespaces(deviceId){ nsDeviceId=deviceId; nsNamespaces=[]; nsActiveIndex=null; const modal=id('namespaceModal'); if(!modal){ console.warn('namespaceModal not found'); return; } // reset UI
    const list=id('nsList'); const tagBody=id('nsTagBody'); const sel=id('nsSelectedLabel'); const status=id('nsStatus'); const listStatus=id('nsListStatus'); if(list){ list.innerHTML='<li class="text-dim" style="padding:.6rem;font-size:.65rem;">加载中...</li>'; }
    if(tagBody){ tagBody.innerHTML='<tr><td colspan="4" class="text-dim" style="padding:.7rem .6rem;">左侧选择命名空间</td></tr>'; }
    if(sel){ sel.textContent='未选择命名空间'; }
    if(status){ status.textContent=''; }
    if(listStatus){ listStatus.textContent=''; }
    modal.style.display='flex'; modal.setAttribute('aria-hidden','false'); loadNamespaces(deviceId);
  }
  function closeNsModal(){ const modal=id('namespaceModal'); if(modal){ modal.style.display='none'; modal.setAttribute('aria-hidden','true'); } nsDeviceId=null; nsNamespaces=[]; nsActiveIndex=null; }
  async function loadNamespaces(deviceId){ if(nsLoading) return; nsLoading=true; const list=id('nsList'); const listStatus=id('nsListStatus'); if(listStatus) listStatus.textContent=''; try { const resp=await fetch(`/data/api/${deviceId}/namespaces`); const data=await resp.json(); nsNamespaces=Array.isArray(data)?data:[]; if(!nsNamespaces.length){ if(list) list.innerHTML='<li class="text-dim" style="padding:.6rem;font-size:.65rem;">无命名空间</li>'; if(listStatus) listStatus.textContent='0'; return; }
      renderNamespaceList(); if(listStatus) listStatus.textContent=nsNamespaces.length+'';
    } catch(e){ if(list) list.innerHTML='<li class="text-danger" style="padding:.6rem;font-size:.65rem;">加载失败</li>'; if(listStatus) listStatus.textContent='ERR'; console.warn('加载 namespaces 失败',e); }
    finally { nsLoading=false; }
  }
  function renderNamespaceList(){ const list=id('nsList'); if(!list){ return; } list.innerHTML=''; nsNamespaces.forEach(ns=>{ const li=document.createElement('li'); li.className='ns-item'+(ns.index===nsActiveIndex?' active':''); li.tabIndex=0; li.dataset.index=ns.index; const uri=ns.uri||''; const short= uri.length>46? uri.slice(0,42)+'…': uri; li.innerHTML=`<span style="flex:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;">NS ${ns.index}</span><span style="font-size:.55rem;opacity:.65;max-width:140px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;">${short?escapeHtml(short):''}</span>`; li.addEventListener('click',()=>selectNamespace(ns.index)); li.addEventListener('keydown',e=>{ if(e.key==='Enter'||e.key===' '){ e.preventDefault(); selectNamespace(ns.index); } }); list.appendChild(li); }); }
  function selectNamespace(index){ if(nsActiveIndex===index) return; nsActiveIndex=index; // update active class
    document.querySelectorAll('#nsList .ns-item').forEach(li=>{ li.classList.toggle('active', Number(li.dataset.index)===index); }); const sel=id('nsSelectedLabel'); const ns=nsNamespaces.find(n=>n.index===index); if(sel){ sel.textContent= ns?`NS ${ns.index} ${ns.uri||''}`:'未选择命名空间'; }
    loadNamespaceTags(nsDeviceId,index);
  }
  async function loadNamespaceTags(deviceId, nsIndex){ const body=id('nsTagBody'); const status=id('nsStatus'); if(body) body.innerHTML='<tr><td colspan="4" class="text-dim" style="padding:.6rem;">加载中...</td></tr>'; if(status) status.textContent=''; try { const r=await fetch(`/data/api/${deviceId}/namespaces/${nsIndex}/tags`); const list=await r.json(); if(!Array.isArray(list) || !list.length){ if(body) body.innerHTML='<tr><td colspan="4" class="text-dim" style="padding:.6rem;">无标签</td></tr>'; if(status) status.textContent='0'; return; }
      if(status) status.textContent=list.length+' 条'; const rows=list.map(t=>{ const name=escapeHtml(t.name||''); const address=escapeHtml(t.address||''); const value=escapeHtml(t.value==null?'':t.value); return `<tr data-address="${address}" data-name="${name}"><td style="padding:4px 8px;">${name}</td><td style="padding:4px 8px;font-family:var(--font-mono);">${address}</td><td style="padding:4px 8px;font-family:var(--font-mono);">${value}</td><td style="padding:2px 6px;text-align:right;" class="action-cell"><button type="button" class="add-btn" title="添加" aria-label="添加点位" onclick="quickAddTag(${deviceId}, '${encodeURIComponent(address)}','${encodeURIComponent(name)}', this)"><svg viewBox='0 0 24 24'><path d='M12 5v14M5 12h14' stroke-linecap='round'/></svg></button></td></tr>`; }).join(''); if(body) body.innerHTML=rows; }
    catch(e){ if(body) body.innerHTML='<tr><td colspan="4" class="text-danger" style="padding:.6rem;">加载失败</td></tr>'; if(status) status.textContent='ERR'; }
  }
  async function quickAddTag(deviceId, encAddress, encName, btn){ const address=decodeURIComponent(encAddress||''); const name=decodeURIComponent(encName||'')||address; if(btn){ btn.disabled=true; btn.classList.add('loading'); }
    try { const r=await fetch(`/data/api/${deviceId}/tags`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,address})}); const js=await r.json(); if(!js.success){ alert(js.message||'添加失败'); if(btn){ btn.disabled=false; btn.classList.remove('loading'); } return; } if(btn){ btn.classList.add('added'); btn.innerHTML='<svg viewBox="0 0 24 24"><path d="M5 13l4 4L19 7" stroke-linecap="round" stroke-linejoin="round"/></svg>'; btn.title='已添加'; btn.setAttribute('aria-label','已添加'); }
      // refresh device card tags for immediate feedback
      fetchAndRender(); }
    catch(e){ alert('错误: '+e.message); if(btn){ btn.disabled=false; btn.classList.remove('loading'); } }
  }
  function escapeHtml(str){ return str==null?'':String(str).replace(/[&<>"']/g,s=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;"}[s])); }

  // ==== 标签列表编辑 ====
  function openEditTags(deviceId){ if(id('editTagsModalDynamic')) return; const html=`<h3 style='margin:0 0 8px;font-size:.9rem;'>编辑点位 #${deviceId}</h3><div id='editTagsBox' style='min-height:160px;font-size:.65rem;'>${spinner(20)} 加载...</div><div style='display:flex;justify-content:space-between;margin-top:8px;'><div style='font-size:.55rem;color:#5fd3ff;'>修改后点击保存</div>${btn('关闭','onclick=closeEditTagsModal()')}</div>`; makeOverlay(html,'editTagsModalDynamic'); loadEditTags(deviceId); }
  function closeEditTagsModal(){ closeModal('editTagsModalDynamic'); }
  async function loadEditTags(deviceId){ const box=id('editTagsBox'); try { const r=await fetch(`/data/api/${deviceId}/tags`); const list=await r.json(); box.innerHTML='<table style="width:100%;border-spacing:0;font-size:.62rem;">'+ '<thead><tr style="text-align:left;color:#7fdcff;"><th style="width:32px;">ID</th><th>名称</th><th>地址</th><th style="width:110px;">操作</th></tr></thead><tbody>'+ (list.map(t=>`<tr data-tag-id='${t.id}'><td>${t.id}</td><td><input value='${escHtml(t.name||'')}' style='width:100%;'/></td><td><input value='${escHtml(t.address||'')}' style='width:100%;font-family:var(--font-mono);'/></td><td style='display:flex;gap:4px;'><button type='button' style='font-size:.58rem;' onclick='saveTag(${deviceId},${t.id},this)'>保存</button><button type='button' style='font-size:.58rem;' onclick='deleteTagRow(${deviceId},${t.id},this)'>删除</button></td></tr>`).join('')||'') + '</tbody></table>'; } catch(e){ box.innerHTML='<div style="padding:8px;color:#ff6a5e;">失败 '+e.message+'</div>'; } }
  async function saveTag(deviceId, tagId, btnRef){ const tr=btnRef.closest('tr'); const inputs=tr.querySelectorAll('input'); const name=inputs[0].value.trim(); const address=inputs[1].value.trim(); btnRef.disabled=true; btnRef.textContent='...'; try { const r=await fetch(`/data/api/${deviceId}/tags/${tagId}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,address})}); const js=await r.json(); if(!js.success){ alert(js.message||'失败'); } else { btnRef.textContent='已保存'; setTimeout(()=>{ btnRef.textContent='保存'; btnRef.disabled=false; },800); fetchAndRender(); } } catch(e){ alert('错误: '+e.message); btnRef.disabled=false; btnRef.textContent='保存'; }
  }
  async function deleteTagRow(deviceId, tagId, btnRef){ if(!confirm('确认删除该点位?')) return; btnRef.disabled=true; try { const r=await fetch(`/data/api/${deviceId}/tags/${tagId}`,{method:'DELETE'}); const js=await r.json(); if(!js.success){ alert(js.message||'删除失败'); btnRef.disabled=false; return; } const tr=btnRef.closest('tr'); if(tr) tr.remove(); fetchAndRender(); } catch(e){ alert('错误: '+e.message); btnRef.disabled=false; }
  }

  // ==== 编辑模式切换 (CSS 控制显示) ====
  function toggleEditMode(){ const sw=id('editModeSwitch'); const on = sw && sw.getAttribute('aria-checked')==='true'; const next=!on; if(sw){ sw.setAttribute('aria-checked', next?'true':'false'); sw.title= next? '关闭编辑模式':'开启编辑模式'; sw.classList.toggle('on', next); const sr=id('editModeSr'); if(sr) sr.textContent= next? '关闭编辑模式':'开启编辑模式'; }
    document.body.classList.toggle('edit-mode', next);
  }

  // ==== 辅助 ====
  function updateDeviceCount(n){ const el=id('deviceCount'); if(el) el.textContent='设备: '+ (n==null? '--': n); }
  // Attach initial listeners (fix tag click on initial SSR list) & maybe initial refresh
  document.addEventListener('DOMContentLoaded', ()=>{ attachTagRowEvents(); initDrawerResizer(); if(id('deviceGridInitial')) fetchAndRender(); const resizer=document.getElementById('drawerResizer'); if(resizer && !resizer._kb){ resizer._kb=true; resizer.addEventListener('keydown', e=>{ const drawer=document.querySelector('.drawer'); if(!drawer) return; let step= (e.shiftKey?80:20); if(e.key==='ArrowLeft'){ const w=clampDrawerWidth(drawer.getBoundingClientRect().width+step); drawer.style.width=w+'px'; try{localStorage.setItem('drawerWidth',w);}catch(err){} e.preventDefault(); } else if(e.key==='ArrowRight'){ const w=clampDrawerWidth(drawer.getBoundingClientRect().width-step); drawer.style.width=w+'px'; try{localStorage.setItem('drawerWidth',w);}catch(err){} e.preventDefault(); } else if(e.key==='Home'){ const w=clampDrawerWidth(window.innerWidth - DRAWER_MAX_PAD - 10); drawer.style.width=w+'px'; try{localStorage.setItem('drawerWidth',w);}catch(err){} e.preventDefault(); } else if(e.key==='End'){ const w=clampDrawerWidth(DRAWER_MIN_W); drawer.style.width=w+'px'; try{localStorage.setItem('drawerWidth',w);}catch(err){} e.preventDefault(); } else if(e.key==='Enter'){ const w=DRAWER_DEFAULT_W; drawer.style.width=w+'px'; try{localStorage.setItem('drawerWidth',w);}catch(err){} e.preventDefault(); } }); } });
  // Export
  Object.assign(global,{ toggleAuto, openDrawer, closeDrawer, doPredictInDrawer, toggleCompareCollapse, setChartMode, openAddDeviceModal, closeAddDeviceModal, submitAddDevice, openNamespaces, closeNsModal, quickAddTag, openEditTags, closeEditTagsModal, saveTag, deleteTagRow, deleteDevice, openEditDevice, closeEditDeviceModal, submitEditDevice, toggleEditMode, openFilterPop, applyFilter, clearFilter, changeTagPage });
})(window);